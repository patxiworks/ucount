# This is an auto-generated Django model module.
# You'll have to do the following manually to clean this up:
#   * Rearrange models' order
#   * Make sure each model has one field with primary_key=True
#   * Make sure each ForeignKey and OneToOneField has `on_delete` set to the desired behavior
#   * Remove `managed = False` lines if you wish to allow Django to create, modify, and delete the table
# Feel free to rename the models, but don't rename db_table values or field names.
from django.db import models


class ActivitySummary(models.Model):
    summaryid = models.TextField(db_column='SummaryID', blank=True, null=True)  # Field name made lowercase. This field type is a guess.
    activitydate = models.DateField(db_column='ActivityDate', blank=True, null=True)  # Field name made lowercase.
    activityid = models.IntegerField(db_column='ActivityID', blank=True, null=True)  # Field name made lowercase.
    activityname = models.CharField(db_column='ActivityName', max_length=50, blank=True, null=True)  # Field name made lowercase.
    activitycentre = models.CharField(db_column='ActivityCentre', max_length=50, blank=True, null=True)  # Field name made lowercase.
    activitytype = models.CharField(db_column='ActivityType', max_length=15, blank=True, null=True)  # Field name made lowercase.
    activitytypename = models.CharField(db_column='ActivityTypeName', max_length=100, blank=True, null=True)  # Field name made lowercase.
    participantid = models.IntegerField(db_column='ParticipantID', blank=True, null=True)  # Field name made lowercase.
    participantname = models.TextField(db_column='ParticipantName', blank=True, null=True)  # Field name made lowercase. This field type is a guess.
    participantcategory = models.CharField(db_column='ParticipantCategory', max_length=6, blank=True, null=True)  # Field name made lowercase.
    participantcentre = models.CharField(db_column='ParticipantCentre', max_length=50, blank=True, null=True)  # Field name made lowercase.
    participantgroup = models.CharField(db_column='ParticipantGroup', max_length=50, blank=True, null=True)  # Field name made lowercase.

    class Meta:
        managed = False  # Created from a view. Don't remove.
        db_table = 'activity_summary'


class AuthGroup(models.Model):
    name = models.CharField(unique=True, max_length=150)

    class Meta:
        managed = False
        db_table = 'auth_group'


class AuthGroupPermissions(models.Model):
    group = models.ForeignKey(AuthGroup, models.DO_NOTHING)
    permission = models.ForeignKey('AuthPermission', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_group_permissions'
        unique_together = (('group', 'permission'),)


class AuthPermission(models.Model):
    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING)
    codename = models.CharField(max_length=100)
    name = models.CharField(max_length=255)

    class Meta:
        managed = False
        db_table = 'auth_permission'
        unique_together = (('content_type', 'codename'),)


class AuthUser(models.Model):
    password = models.CharField(max_length=128)
    last_login = models.DateTimeField(blank=True, null=True)
    is_superuser = models.BooleanField()
    username = models.CharField(unique=True, max_length=150)
    last_name = models.CharField(max_length=150)
    email = models.CharField(max_length=254)
    is_staff = models.BooleanField()
    is_active = models.BooleanField()
    date_joined = models.DateTimeField()
    first_name = models.CharField(max_length=150)

    class Meta:
        managed = False
        db_table = 'auth_user'


class AuthUserGroups(models.Model):
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)
    group = models.ForeignKey(AuthGroup, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_user_groups'
        unique_together = (('user', 'group'),)


class AuthUserUserPermissions(models.Model):
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)
    permission = models.ForeignKey(AuthPermission, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_user_user_permissions'
        unique_together = (('user', 'permission'),)


class BackendE6Cities(models.Model):
    cityid = models.AutoField(db_column='CityID', primary_key=True)  # Field name made lowercase.
    city = models.CharField(db_column='City', max_length=20)  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'backend_e6cities'


class DjangoAdminLog(models.Model):
    object_id = models.TextField(blank=True, null=True)
    object_repr = models.CharField(max_length=200)
    action_flag = models.PositiveSmallIntegerField()
    change_message = models.TextField()
    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING, blank=True, null=True)
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)
    action_time = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_admin_log'


class DjangoContentType(models.Model):
    app_label = models.CharField(max_length=100)
    model = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'django_content_type'
        unique_together = (('app_label', 'model'),)


class DjangoMigrations(models.Model):
    app = models.CharField(max_length=255)
    name = models.CharField(max_length=255)
    applied = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_migrations'


class DjangoSession(models.Model):
    session_key = models.CharField(primary_key=True, max_length=40)
    session_data = models.TextField()
    expire_date = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_session'


class E1People(models.Model):
    personid = models.AutoField(db_column='PersonID', primary_key=True)  # Field name made lowercase.
    surname = models.CharField(db_column='Surname', max_length=30)  # Field name made lowercase.
    firstname = models.CharField(db_column='FirstName', max_length=30)  # Field name made lowercase.
    othername = models.CharField(db_column='OtherName', max_length=30, blank=True, null=True)  # Field name made lowercase.
    dofb = models.DateField(db_column='DofB', blank=True, null=True)  # Field name made lowercase.
    phone = models.CharField(db_column='Phone', max_length=20, blank=True, null=True)  # Field name made lowercase.
    email = models.CharField(db_column='Email', max_length=150, blank=True, null=True)  # Field name made lowercase.
    status = models.IntegerField(db_column='Status')  # Field name made lowercase.
    centre = models.ForeignKey('E5Centres', models.DO_NOTHING, db_column='Centre', blank=True, null=True)  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'e1_people'


class E2Activities(models.Model):
    activityid = models.AutoField(db_column='ActivityID', primary_key=True)  # Field name made lowercase.
    activitydescription = models.TextField(db_column='ActivityDescription', blank=True, null=True)  # Field name made lowercase.
    personid = models.ForeignKey(E1People, models.DO_NOTHING, db_column='PersonID', blank=True, null=True)  # Field name made lowercase.
    activitytypeid = models.ForeignKey('E2ActivityType', models.DO_NOTHING, db_column='ActivityTypeID')  # Field name made lowercase.
    format = models.CharField(db_column='Format', max_length=10)  # Field name made lowercase.
    activityname = models.CharField(db_column='ActivityName', max_length=50)  # Field name made lowercase.
    centre = models.ForeignKey('E5Centres', models.DO_NOTHING, db_column='Centre', blank=True, null=True)  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'e2_activities'


class E2ActivityType(models.Model):
    activitytypeid = models.AutoField(db_column='ActivityTypeID', primary_key=True)  # Field name made lowercase.
    activitytype = models.CharField(db_column='ActivityType', max_length=15)  # Field name made lowercase.
    activitytypename = models.CharField(db_column='ActivityTypeName', max_length=100)  # Field name made lowercase.
    activityformat = models.CharField(db_column='ActivityFormat', max_length=10)  # Field name made lowercase.
    serialnoonreport = models.IntegerField(db_column='SerialNoOnReport', blank=True, null=True)  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'e2_activity_type'


class E3Categories(models.Model):
    categoryid = models.AutoField(db_column='CategoryID', primary_key=True)  # Field name made lowercase.
    category = models.CharField(db_column='Category', max_length=6)  # Field name made lowercase.
    categorydescription = models.CharField(db_column='CategoryDescription', max_length=50)  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'e3_categories'


class E4Groups(models.Model):
    groupid = models.AutoField(db_column='GroupID', primary_key=True)  # Field name made lowercase.
    group = models.CharField(db_column='Group', max_length=50)  # Field name made lowercase.
    centre = models.ForeignKey('E5Centres', models.DO_NOTHING, db_column='Centre', blank=True, null=True)  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'e4_groups'


class E5Centres(models.Model):
    centreid = models.AutoField(db_column='CentreID', primary_key=True)  # Field name made lowercase.
    centre = models.CharField(db_column='Centre', max_length=50)  # Field name made lowercase.
    centreacronym = models.CharField(db_column='CentreAcronym', max_length=50)  # Field name made lowercase.
    city = models.ForeignKey(BackendE6Cities, models.DO_NOTHING, db_column='City')  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'e5_centres'


class R1ActivitiesLog(models.Model):
    activitieslogid = models.AutoField(db_column='ActivitiesLogID', primary_key=True)  # Field name made lowercase.
    activitydate = models.DateField(db_column='ActivityDate')  # Field name made lowercase.
    activityid = models.ForeignKey(E2Activities, models.DO_NOTHING, db_column='ActivityID')  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'r1_activities_log'


class R2Participants(models.Model):
    participantsid = models.AutoField(db_column='ParticipantsID', primary_key=True)  # Field name made lowercase.
    activitieslogid = models.ForeignKey(R1ActivitiesLog, models.DO_NOTHING, db_column='ActivitiesLogID')  # Field name made lowercase.
    personid = models.ForeignKey(E1People, models.DO_NOTHING, db_column='PersonID')  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'r2_participants'
        unique_together = (('activitieslogid', 'personid'),)


class R3CategoryAssign(models.Model):
    categoryassignid = models.AutoField(db_column='CategoryAssignID', primary_key=True)  # Field name made lowercase.
    startdate = models.DateField(db_column='StartDate')  # Field name made lowercase.
    enddate = models.DateField(db_column='EndDate', blank=True, null=True)  # Field name made lowercase.
    categoryid = models.ForeignKey(E3Categories, models.DO_NOTHING, db_column='CategoryID')  # Field name made lowercase.
    personid = models.ForeignKey(E1People, models.DO_NOTHING, db_column='PersonID')  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'r3_category_assign'
        unique_together = (('personid', 'categoryid'),)


class R4GroupAssign(models.Model):
    groupassignid = models.AutoField(db_column='GroupAssignID', primary_key=True)  # Field name made lowercase.
    groupid = models.ForeignKey(E4Groups, models.DO_NOTHING, db_column='GroupID')  # Field name made lowercase.
    personid = models.ForeignKey(E1People, models.DO_NOTHING, db_column='PersonID')  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'r4_group_assign'


class R5AttendedbyAssign(models.Model):
    attendedbyassignid = models.AutoField(db_column='AttendedByAssignID', primary_key=True)  # Field name made lowercase.
    attendedby = models.ForeignKey(E1People, models.DO_NOTHING, db_column='AttendedBy')  # Field name made lowercase.
    person = models.ForeignKey(E1People, models.DO_NOTHING, db_column='Person', related_name='r5attendedbyassign_person_set')  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'r5_attendedby_assign'


class R6ActivityAssign(models.Model):
    activityassignid = models.AutoField(db_column='ActivityAssignID', primary_key=True)  # Field name made lowercase.
    activityid = models.ForeignKey(E2Activities, models.DO_NOTHING, db_column='ActivityID')  # Field name made lowercase.
    personid = models.ForeignKey(E1People, models.DO_NOTHING, db_column='PersonID')  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'r6_activity_assign'
