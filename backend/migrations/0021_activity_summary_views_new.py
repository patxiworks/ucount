# Generated by Django 5.0.3 on 2024-09-12 10:07

import django.db.models.deletion
from django.db import migrations, models

CREATE_SQL_ActivitiesByGrps = """
CREATE VIEW ActivitiesByGrps AS
SELECT 
r4_group_assign.GroupID,
e4_groups.Grp,
e1_people.Surname ||', '|| e1_people.FirstName AS Responsible,
e2_activities.ActivityDescription,
r3_category_assign.CategoryID AS CategoryID,
e3_categories.CategoryDescription AS CategoryDescription
FROM
e2_activities 
JOIN e1_people on e2_activities.PersonID = e1_people.PersonID
JOIN r3_category_assign on e2_activities.PersonID = r3_category_assign.PersonID
JOIN r4_group_assign on e2_activities.PersonID = r4_group_assign.PersonID
JOIN e3_categories on r3_category_assign.CategoryID = e3_categories.CategoryID
JOIN e4_groups on r4_group_assign.GroupID = e4_groups.GroupID
order by r4_group_assign.GroupID;
"""
DROP_SQL_ActivitiesByGrps = "DROP VIEW IF EXISTS ActivitiesByGrps;"

CREATE_SQL_WhoRunsWhat = """
CREATE VIEW WhoRunsWhat AS
SELECT
e1_people.Surname ||', '|| e1_people.FirstName AS Responsible,
e2_activities.ActivityDescription,
--r3_category_assign.CategoryID,
e3_categories.Category,
r4_group_assign.GroupID,
e4_groups.Grp
FROM e2_activities 
JOIN e1_people ON e2_activities.PersonID = e1_people.PersonID
JOIN r3_category_assign ON e2_activities.PersonID = r3_category_assign.PersonID
JOIN r4_group_assign ON e2_activities.PersonID = r4_group_assign.PersonID
JOIN e3_categories ON r3_category_assign.CategoryID = e3_categories.CategoryID
JOIN e4_groups ON r4_group_assign.GroupID = e4_groups.GroupID
ORDER BY Responsible;
"""
DROP_SQL_WhoRunsWhat = "DROP VIEW IF EXISTS WhoRunsWhat;"

CREATE_SQL_PhoneDirectoryByCategory = """
CREATE VIEW PhoneDirectoryByCategory AS
SELECT 
r3_category_assign.CategoryID,
e3_categories.CategoryDescription,
e1_people.Surname ||', '|| e1_people.FirstName AS FullName,
e1_people.Phone
FROM e1_people
JOIN r3_category_assign on e1_people.PersonID = r3_category_assign.PersonID
JOIN e3_categories on r3_category_assign.CategoryID = e3_categories.CategoryID
ORDER BY r3_category_assign.CategoryID, FullName;
"""
DROP_SQL_PhoneDirectoryByCategory = "DROP VIEW IF EXISTS PhoneDirectoryByCategory;"

CREATE_SQL_StableTotals = """
CREATE VIEW StableTotals AS
SELECT
"StableTotals" as ActivityDescription,
1 as SerialNoOnReport,
GroupID,
Category,
COUNT (Category) as Total 
FROM e1_people 
JOIN r3_category_assign on e1_people.PersonID = r3_category_assign.PersonID
JOIN r4_group_assign ON e1_people.PersonID = r4_group_assign.PersonID
JOIN e3_categories ON r3_category_assign.CategoryID = e3_categories.CategoryID
--WHERE r3_category_assign.CategoryID <=2 
GROUP BY GroupID, Category;
"""
DROP_SQL_StableTotals = "DROP VIEW IF EXISTS StableTotals;"

CREATE_SQL_Totals = """
CREATE VIEW Totals AS
-- This is tagged DynamicTotals in the ActivityDescription because it will vary (depending on the selection of dates e.g. monthly).
SELECT
strftime('%Y-%m', ActivityDate) AS YrMonth,
"dynTotals" as ActivityDescription,
2 as SerialNoOnReport,
GroupID,
Category,
COUNT (Category) as Total 
FROM r2_participants 
JOIN r3_category_assign on r2_participants.PersonID = r3_category_assign.PersonID
JOIN r1_activities_log ON r2_participants.ActivitiesLogID = r1_activities_log.ActivitiesLogID
JOIN r4_group_assign ON r2_participants.PersonID = r4_group_assign.PersonID
JOIN e3_categories ON r3_category_assign.CategoryID = e3_categories.CategoryID
GROUP BY GroupID, Category;
SELECT * from Totals;
"""
DROP_SQL_Totals = "DROP VIEW IF EXISTS Totals;"

CREATE_SQL_TotalsByActivity = """
CREATE VIEW TotalsByActivity AS
-- Also dynamic i.e. will vary with month(s) selected; also Grouped by ActivityType. 
--This is the place to mount the pivot table on.
SELECT
strftime('%Y-%m', ActivityDate) AS YrMonth,
ActivityTypeID,
ActivityTypeName,
SerialNoOnReport,
GroupID,
Category,
COUNT (Category) as Total 
FROM r2_participants 
JOIN r3_category_assign on r2_participants.PersonID = r3_category_assign.PersonID
JOIN r1_activities_log ON r2_participants.ActivitiesLogID = r1_activities_log.ActivitiesLogID
JOIN e2_activity_type on r1_activities_log.ActivityID = e2_activity_type.ActivityTypeID
JOIN r4_group_assign ON r2_participants.PersonID = r4_group_assign.PersonID
JOIN e3_categories ON r3_category_assign.CategoryID = e3_categories.CategoryID
GROUP BY GroupID, Category, ActivityTypeID
ORDER BY SerialNoOnReport ASC;
SELECT * from TotalsByActivity;
"""
DROP_SQL_TotalsByActivity = "DROP VIEW IF EXISTS TotalsByActivity;"

CREATE_SQL_forReport117 = """
CREATE VIEW forReport117 AS
SELECT e2_activity_type.*, YrMonth, Total, GroupID, Category from e2_activity_type LEFT JOIN TotalsByActivity ON e2_activity_type.ActivityTypeID = TotalsByActivity.ActivityTypeID;
"""
DROP_SQL_forReport117 = "DROP VIEW IF EXISTS TotalsByActivity;"

CREATE_SQL_Report117 = """
CREATE VIEW Report117 AS
SELECT 
    ActivityTypeID, ActivityTypeName, Category,
    SUM(CASE WHEN GroupID = 1 THEN Total ELSE 0 END) AS Grp0,
    SUM(CASE WHEN GroupID = 2 THEN Total ELSE 0 END) AS Grp1,
	SUM(CASE WHEN GroupID = 1 THEN Total ELSE 0 END) AS Grp2,
	SUM(CASE WHEN GroupID = 1 THEN Total ELSE 0 END) AS Grp89,
	SUM(CASE WHEN GroupID = 1 THEN Total ELSE 0 END) AS Grp90
FROM 
    forReport117
GROUP BY 
    SerialNoOnReport;
	SELECT* from Report117;
"""
DROP_SQL_Report117 = "DROP VIEW IF EXISTS forReport117;"

CREATE_SQL_PreFidelityToMOF = """
CREATE VIEW PreFidelityToMoF AS
SELECT Surname||', '|| FirstName AS FullName, r2_participants.ActivitiesLogID, ActivityDate, r1_activities_log.ActivityID, e2_activities.ActivityTypeID, e2_activity_type.ActivityTypeName, ActivityType
FROM
r2_participants
JOIN r1_activities_log on r2_participants.ActivitiesLogID = r1_activities_log.ActivitiesLogID
JOIN e2_activities on r1_activities_log.ActivityID = e2_activities.ActivityID
JOIN e2_activity_type on e2_activities.ActivityTypeID = e2_activity_type.ActivityTypeID
JOIN e1_people ON r2_participants.PersonID = e1_people.PersonID
ORDER BY FullName ASC;
SELECT * FROM PreFidelityToMoF;
"""
DROP_SQL_PreFidelityToMOF = "DROP VIEW IF EXISTS PreFidelityToMoF;"

CREATE_SQL_FidelityToMoF = """
CREATE VIEW FidelityToMoF AS
SELECT 
    FullName,
    COUNT(CASE WHEN ActivityType = 'ccp' THEN ActivityType ELSE 0 END) AS ccp,
    COUNT(CASE WHEN ActivityType = 'rtm' THEN ActivityType ELSE 0 END) AS rtm
FROM 
    PreFidelityToMoF
GROUP BY 
    FullName
ORDER BY FullName ASC;
"""
DROP_SQL_FidelityToMoF = "DROP VIEW IF EXISTS FidelityToMoF;"


CREATE_SQL = """
CREATE VIEW activity_summary AS
SELECT
--strftime('%Y-%m', ActivityDate) AS YrMonth,
ActivityDate,
ActivityName,
C1.CentreAcronym AS ActivityCentre,
ActivityType,
ActivityTypeName,
--SerialNoOnReport,
Surname ||', '|| FirstName AS ParticipantName,
Category as ParticipantCategory,
C2.CentreAcronym AS ParticipantCentre,
--r4_group_assign.GroupID,
`Group` as ParticipantGroup
--COUNT (Category) as Total 
FROM r2_participants
JOIN r3_category_assign on r2_participants.PersonID = r3_category_assign.PersonID
JOIN r1_activities_log ON r2_participants.ActivitiesLogID = r1_activities_log.ActivitiesLogID
JOIN e2_activities ON r1_activities_log.ActivityID = e2_activities.ActivityID
JOIN e2_activity_type ON e2_activities.ActivityTypeID = e2_activity_type.ActivityTypeID
JOIN r4_group_assign ON r2_participants.PersonID = r4_group_assign.PersonID
JOIN e4_groups ON r4_group_assign.GroupID = e4_groups.GroupID
JOIN e3_categories ON r3_category_assign.CategoryID = e3_categories.CategoryID
JOIN e1_people ON r2_participants.PersonID = e1_people.PersonID
JOIN e5_centres C1 ON e2_activities.Centre = C1.CentreID
JOIN e5_centres C2 ON e1_people.Centre = C2.CentreID
--GROUP BY GroupID, Category, e2_activity_type.ActivityTypeID
ORDER BY ActivityDate ASC;
"""
DROP_SQL = "DROP VIEW IF EXISTS activity_summary;"


class Migration(migrations.Migration):

    dependencies = [
        ('backend', '0018_alter_r3categoryassign_options_alter_e1people_centre_and_more'),
    ]

    operations = [
        migrations.RunSQL(
            sql=CREATE_SQL,
            reverse_sql=DROP_SQL,
        ),
    ]
